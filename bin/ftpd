#!/usr/bin/env python

'''
    ftpd
    ~~~~

Script to setup an FTP server using "pyftpdlib".
The script is released under the ISC license.

License:

Copyright (c) 2015, Farzad Ghanei

Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''

from __future__ import print_function

import sys
import os
import logging
import logging.handlers
import getpass
import getopt

try:
    import pyftpdlib
except ImportError as exp:
    print("pyftpdlib is not available", file = sys.stderr)
    sys.exit(getattr(os, 'EX_UNAVAILABLE', 69))

from pyftpdlib.authorizers import DummyAuthorizer
from pyftpdlib.handlers import FTPHandler
from pyftpdlib.servers import ThreadedFTPServer, FTPServer

__version__ = '0.0.1'
pyftpdlib_version = getattr(pyftpdlib, '__ver__', '<unknown>')

def get_logger():
    '''Returns the logger that pyftpdlib uses'''
    return logging.getLogger('pyftpdlib')

def config_logger(logger, quiet = False, verbose = False, filename = None, syslog = False):
    '''Configures the logger object with specified args'''

    if quiet:
        logger.setLevel(logging.ERROR)
    elif verbose:
        logger.setLevel(logging.DEBUG)

    for handler in logger.handlers:
        if quiet:
            logger.removeHandler(handler)
        else:
            handler.setLevel( verbose and logging.DEBUG or logging.INFO )

    if filename:
        handler = logging.FileHandler(filename)
        handler.setLevel( verbose and logging.DEBUG or logging.INFO )
        logger.addHandler(handler)

    if syslog:
        handler = logging.handlers.SysLogHandler()
        handler.setLevel( verbose and logging.DEBUG or logging.INFO )
        logger.addHandler(handler)
    return logger

def create_server(
        directory, user, password,
        anon = False,
        bind = '127.0.0.1', port = 21,
        anon_write = False,
        max_cons = 100,
        server_class = ThreadedFTPServer
    ):
    '''Creates an FTP server configured with the specified args.

    :returns: FTPServer
    :raises: ValueError on missing user/password if anonymous access is disabled
    '''
    authorizer = DummyAuthorizer()

    if anon:
        authorizer.add_anonymous(directory, perm = anon_write and 'elradfmw' or 'elr')
    else:
        if not user:
            raise ValueError('User is required')
        if not password:
            raise ValueError('Password is required')

    if user and password:
        authorizer.add_user(user, password, directory, perm='elradfmw')

    handler = FTPHandler
    handler.authorizer = authorizer

    server = server_class((bind, port), handler)
    server.max_cons = max_cons
    return server

usage = '''FTP server using pyftpdlib version {0}
Usage:
{1} [options]

Options:
   -h, --help           show this help
   -q, --quiet          less output (overwrites verbose)
   -v, --verbose        more output
   -l, --log            log to a file
   -d, --dir            root directory (default is .)
   -u, --user           username for auth
   -w, --pass           password for auth
   -a, --anonymous      enable anonymous access
   -b, --bind           bind to interface (default is 127.0.0.1)
   -p, --port           port to listen (default is 2121)
   --syslog             log to syslog
   --anonymous-write    grant write permissions to anonymous
   --max-connections    limit maximum connections (default is 100)
'''.format(pyftpdlib_version, sys.argv[0])

def main(args):
    '''Start an FTP server configured with the specified args.

    :returns: int exit code
    '''
    try:
        opts, _ = getopt.getopt(
                args,
                'hqvl:d:u:w:ab:p:',
                [
                    'help',
                    'quiet',
                    'verbose',
                    'log=',
                    'dir='
                    'user=',
                    'pass=',
                    'anonymous',
                    'bind=',
                    'port=',
                    'syslog',
                    'anonymous-write',
                    'max-connections=',
                ]
                )
    except getopt.GetoptError as exp:
        print(str(exp), file=sys.stderr)
        return getattr(os, 'EX_DATAERR', 65)

    user = getpass.getuser()
    password = None
    anon = False
    directory = os.getcwd()
    bind = '127.0.0.1'
    port = 2121
    anon_write = False
    max_cons = 100
    verbose = False
    quiet = False
    log_filename = None
    log_syslog = False

    for (key, val) in opts:
        if key in ('-h', '--help'):
            print(usage)
            return getattr(os, 'EX_OK', 0)
        elif key in ('-v', '--verbose'):
            verbose = True
        elif key in ('-q', '--quiet'):
            quiet = True
        elif key in ('-l', '--log') and val:
            log_filename = os.path.abspath(val)
        elif key in ('-b', '--bind') and val:
            bind = val.strip()
        elif key in ('-p', '--port') and val:
            port = int(val)
        elif key in ('-u', '--user') and val:
            user = val
        elif key in ('-w', '--pass') and val:
            password = val
        elif key in ('-a', '--anonymous'):
            anon = True
        elif key in ('-d', '--directory') and val:
            directory = val
        elif key == '--syslog':
            log_syslog = True
        elif key == '--max-connections' and val:
            max_cons = min(int(val), 1)
        elif key == '--anonymous-write':
            anon_write = True

    if log_filename and not os.path.exists(os.path.dirname(log_filename)):
        raise ValueError("invalid log file name. containing directory does not exist")

    config_logger(get_logger(), quiet, verbose, log_filename, log_syslog)

    if not anon:
        while not password:
            password = getpass.getpass('Password for {0}: '.format(user))

    server = create_server(directory, user, password, anon, bind, port, anon_write, max_cons)
    server.serve_forever()

if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv[1:]))
    except KeyboardInterrupt as exp:
        sys.exit(getattr(os, 'EX_DATAERR', 65))
    except ValueError as exp:
        print(str(exp), file = sys.stderr)
        sys.exit(getattr(os, 'EX_DATAERR', 65))
